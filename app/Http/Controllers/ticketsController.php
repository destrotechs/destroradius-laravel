<?php

namespace App\Http\Controllers;
use App\Ticket;
use App\Package;
use Auth;
use DB;
use App\Log;
use App\Transaction;
use Illuminate\Http\Request;

class ticketsController extends Controller
{
    public function __construct(){
      $this->logs_enabled=0;
        $enabled=DB::table('settings')->get();
        foreach ($enabled as $key => $en) {
            $this->logs_enabled=$en->logs_enabled;
        }
    	$this->middleware('auth');
    }
    public function render_tickets_open(){
    	$tickets = Ticket::where([['status','=','open'],['assignedto','=','all managers']])->orWhere('assignedto','=',Auth::user()->email)->paginate(10);
    	return view('tickets.opentickets',compact('tickets'));
    }
    //render new ticket page
    public function newTicket(){
    	$packages=Package::all();
    	return view('tickets.newticket',compact('packages'));
    }
    //return cost for selected package
    public function getPackageCost(Request $request){
    	$package=DB::table('packages')->where('packagename','=',$request->get('package'))->get();
    	$id=0;
    	$cost=0;
    	foreach ($package as $key => $p) {
    		$id=$p->id;
    	}
    	$amount=DB::table('package_prices')->where('packageid','=',$id)->get();

    	foreach ($amount as $key => $a) {
    		$cost=$a->amount;
    	}
    	echo $cost;
    }
    //save autogenerated tickets
    public function saveAutoGenTickets(Request $request){


        $username=$request->get('username');
        $password=$request->get('password');
        $serialnumber=$request->get('serialnumber');
        $cost=$request->get('cost');
        $package=$request->get('package');

        $ticketnum=$request->get('ticketsnum');

        for($i=0;$i<$ticketnum;$i++){
           //activate tickets on radcheck
           $radcheckrec=DB::table('radcheck')->insert(['username'=>$username[$i],'attribute'=>'Cleartext-Password','op'=>':=','value'=>$password[$i]]);

           //add ticket user to selected package
           $usergroup=DB::table('radusergroup')->insert(['username'=>$username[$i],'groupname'=>$package,'priority'=>'1']);

           //save tickets on tickets table
           $ticket=new Ticket;
           $ticket->customer_username=$username[$i];
           $ticket->password=$password[$i];
           $ticket->group=$package;
           $ticket->priority='1';
           $ticket->subject='package ticket';
           $ticket->status='open';
           $ticket->assignedto='all managers';
           $ticket->location='all';
           $ticket->cost=$cost[$i];
           $ticket->serialnumber=$serialnumber[$i];
           $ticket->package=$package;
           $ticket->message="auto generated package ";

           $ticket->save();
        }

        return redirect()->route('tickets.open')->with("success","Tickets have been activated successfully");

    }
    public function closeTicket(Request $request,$id){
      $ticket=Ticket::find($id);
      $mid=Auth::user()->id;
      $cmrate=0;
      $rate=DB::table('managercommissionrates')->where([['managerid','=',$mid],['type','=','ticket']])->get();
      foreach ($rate as $key => $r) {
        $cmrate=$r->rate;
      }
      if($cmrate==0){
        return "Manager has no commission rate assigned, selling a ticket is disabled";
      }else{
                  //record transaction
          $t= new Transaction;
          $t->transaction_id=$ticket->id;
          $t->amount=$ticket->cost;
          $t->initiator=Auth::user()->email;
          $t->description="ticket sold";

          $t->save();


          //associate transaction with manager
          $benefit=($cmrate/100)*$ticket->cost;

          DB::table('managertransactions')->insert(['transactionid'=>$ticket->serialnumber,'managerid'=>$mid,'commission'=>$benefit,'description'=>'ticket sold']);

          //close ticket
          $t=DB::table('tickets')->where('id','=',$id)->update(['status'=>'closed']);
          if($request->ajax()){
            echo "ticket closed successfully";
          }else{
            return redirect()->back()->with("success","ticket sold and closed successfully");
          }
      }
    }
    public function deleteTicket(Request $request,$id){
      $ticket=Ticket::find($id);
      $ticket->delete();
      if($request->ajax()){
        echo "ticket deleted successfully";
      }else{

      return redirect()->back()->with("success","ticket deleted successfully");
      }
    }
}
